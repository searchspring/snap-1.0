{"version":3,"file":"5772.26c4f77c.iframe.bundle.js","mappings":";AAgMA;;;AAGA","sources":["webpack://@searchspring/snap-preact/./components/src/components/Molecules/TemplatesEditor/TemplatesEditor.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css, Global } from '@emotion/react';\nimport classnames from 'classnames';\nimport { useState } from 'preact/hooks';\nimport { ChromePicker } from 'react-color';\nimport { Icon } from '../../Atoms/Icon/Icon';\nimport { Button } from '../../Atoms/Button';\nimport { observer } from 'mobx-react-lite';\nimport { debounce } from '@searchspring/snap-toolbox';\nimport { CacheProvider } from '../../../providers';\nimport { GLOBAL_THEME_NAME } from '../../../../../src/Templates/Stores/TargetStore';\nconst CSS = {\n    ColorDisplay: ({ color, isColorPickerVisible }) => css({\n        backgroundColor: color,\n        border: isColorPickerVisible ? '1px solid black' : '',\n    }),\n    TemplatesEditor: ({}) => css({\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: '420px',\n        overflow: 'hidden',\n        fontSize: '14px',\n        position: 'fixed',\n        zIndex: '10003',\n        cursor: 'auto',\n        top: '10px',\n        right: 0,\n        background: 'white',\n        padding: '10px',\n        color: '#333',\n        border: '1px solid #ccc',\n        borderRight: 0,\n        borderTopLeftRadius: '5px',\n        borderBottomLeftRadius: '5px',\n        boxShadow: 'rgba(81, 81, 81, 0.5) 1px 1px 3px 0px',\n        transition: 'height ease 0.2s, right ease 0.5s 0.2s',\n        '&.collapsed': {\n            right: '-400px',\n            transition: 'height ease 0.5s 0.5s, right ease 0.5s',\n            height: '33px',\n            cursor: 'pointer',\n        },\n        '& .logo': {\n            '& img': {\n                display: 'inline-block',\n                height: '30px',\n                maxHeight: '30px',\n                verticalAlign: 'middle',\n            },\n        },\n        '& input, select, option, optgroup, button, h1, h2, h3, h4, h5, h6, i': {\n            all: 'revert',\n        },\n        '& h1': { fontSize: '20px' },\n        '& h2': { fontSize: '18px' },\n        '& h3': { fontSize: '16px' },\n        '& h4': { fontSize: '14px' },\n        '& h5': { fontSize: '12px' },\n        '& h6': { fontSize: '10px' },\n        '& .header-actions': {\n            cursor: 'pointer',\n            position: 'absolute',\n            right: 15,\n            top: 15,\n            '& .ss__button': {\n                margin: '0 10px',\n            },\n        },\n        '& .section': {\n            marginBottom: '10px',\n            fontSize: '14px',\n            '& input + span': {\n                marginLeft: '10px',\n            },\n            '& label': {\n                width: '215px',\n                display: 'inline-flex',\n                marginRight: '5px',\n            },\n            '& .indent': {\n                marginLeft: '15px',\n                '& label': {\n                    width: '200px',\n                },\n            },\n            '& .theme-editor': {\n                padding: '5px 0',\n                position: 'relative',\n                '& .chrome-picker': {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: 'calc(225px / 2)',\n                    bottom: '35px',\n                },\n                '& .color-preview': {\n                    display: 'inline-flex',\n                    width: '40px',\n                    height: '20px',\n                    borderRadius: '3px',\n                    cursor: 'pointer',\n                    boxShadow: 'rgba(81, 81, 81, 0.5) 1px 1px 3px 0px',\n                    verticalAlign: 'middle',\n                },\n                '& .color-value': {\n                    display: 'inline-flex',\n                    padding: '0 10px',\n                },\n            },\n        },\n    }),\n};\nexport const TemplatesEditor = observer((properties) => {\n    const { onRemoveClick, templatesStore } = properties;\n    const searchTargets = Object.keys(templatesStore.targets.search || {}).map((target) => ({\n        type: 'search',\n        target,\n        template: templatesStore.targets.search[target],\n        selector: templatesStore.targets.search[target].selector,\n    }));\n    const autocompleteTargets = Object.keys(templatesStore.targets.autocomplete || {}).map((target) => ({\n        type: 'autocomplete',\n        target,\n        template: templatesStore.targets.autocomplete[target],\n        selector: templatesStore.targets.autocomplete[target].selector,\n    }));\n    const recommendationBundleTargets = Object.keys(templatesStore.targets.recommendation.bundle || {}).map((target) => ({\n        type: 'recommendation/bundle',\n        target,\n        template: templatesStore.targets.recommendation.bundle[target],\n        selector: templatesStore.targets.recommendation.bundle[target].selector,\n    }));\n    const recommendationDefaultTargets = Object.keys(templatesStore.targets.recommendation.default || {}).map((target) => ({\n        type: 'recommendation/default',\n        target,\n        template: templatesStore.targets.recommendation.default[target],\n        selector: templatesStore.targets.recommendation.default[target].selector,\n    }));\n    const recommendationEmailTargets = Object.keys(templatesStore.targets.recommendation.email || {}).map((target) => ({\n        type: 'recommendation/email',\n        target,\n        template: templatesStore.targets.recommendation.email[target],\n        selector: templatesStore.targets.recommendation.email[target].selector,\n    }));\n    const targets = [\n        ...searchTargets,\n        ...autocompleteTargets,\n        ...recommendationBundleTargets,\n        ...recommendationDefaultTargets,\n        ...recommendationEmailTargets,\n    ];\n    const [collapsed, setCollapsed] = useState(false);\n    const [selectedTarget, changeTargetSelection] = useState(targets[0]);\n    const [selectedLanguage, changeLanguage] = useState(templatesStore.language);\n    const [selectedCurrency, changeCurrency] = useState(templatesStore.currency);\n    const styling = {\n        css: [CSS.TemplatesEditor({ ...properties })],\n    };\n    const { library } = templatesStore;\n    const { languages, currencies } = library.locales;\n    const languageKeys = Object.keys(languages);\n    const currencyKeys = Object.keys(currencies);\n    const libraryThemes = Object.keys(templatesStore.themes.library || {});\n    const lcoalThemes = Object.keys(templatesStore.themes.local || {}).sort((a, b) => {\n        if (a === GLOBAL_THEME_NAME)\n            return -1;\n        if (b === GLOBAL_THEME_NAME)\n            return 1;\n        return 0;\n    });\n    const selectedTargetConfig = templatesStore.getTarget(selectedTarget.type, selectedTarget.target);\n    const themeRef = templatesStore.themes[selectedTarget.template.theme.location][selectedTarget.template.theme.name];\n    const theme = themeRef.theme;\n    const setOverride = debounce((obj) => {\n        themeRef.setOverride(obj);\n    }, 10);\n    const [isColorPickerVisible, setColorPickerVisible] = useState(false);\n    return (_jsx(CacheProvider, { children: _jsxs(\"div\", { className: classnames('ss__template-editor', { collapsed: collapsed }), ...styling, onClick: (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setCollapsed(false);\n                if (isColorPickerVisible && !e.target.className.includes('color-preview')) {\n                    setColorPickerVisible(false);\n                }\n            }, children: [_jsx(\"div\", { className: 'logo', children: _jsx(\"img\", { src: \"https://snapui.searchspring.io/searchspring.svg\" }) }), _jsxs(\"div\", { className: 'header-actions', onClick: (e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setCollapsed(true);\n                    }, children: [_jsx(Button, { onClick: () => {\n                                onRemoveClick();\n                            }, children: \"Stop Editing\" }), _jsx(\"span\", { onClick: () => {\n                                setCollapsed(true);\n                            }, children: _jsx(Icon, { icon: \"close-thin\" }) })] }), !collapsed ? (_jsx(Global, { styles: css `\n\t\t\t\t\t\t\t${selectedTarget.selector} {\n\t\t\t\t\t\t\t\tborder: 1px dashed black !important;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t` })) : (''), _jsx(\"h2\", { children: \"Global\" }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"language-select\", children: \"Language: \" }), _jsx(\"select\", { id: \"language-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const language = selectedOption.value;\n                                changeLanguage(language);\n                                templatesStore.setLanguage(language);\n                            }, children: languageKeys.map((language) => {\n                                return _jsx(\"option\", { selected: language === selectedLanguage, children: language });\n                            }) })] }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"currency-select\", children: \"Currency: \" }), _jsx(\"select\", { id: \"currency-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const currency = selectedOption.value;\n                                changeCurrency(currency);\n                                templatesStore.setCurrency(currency);\n                            }, children: currencyKeys.map((currency) => {\n                                return _jsx(\"option\", { selected: currency === selectedCurrency, children: currency });\n                            }) })] }), _jsx(\"h2\", { children: \"Template\" }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"target-select\", children: \"Template Target: \" }), _jsxs(\"select\", { id: \"target-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const targetId = selectedOption.value;\n                                const optgroup = selectedOption.closest('optgroup');\n                                const controller = optgroup?.label;\n                                const newTarget = targets.find((target) => target.target === targetId && target.type === controller);\n                                if (newTarget) {\n                                    changeTargetSelection(newTarget);\n                                }\n                            }, children: [searchTargets && (_jsx(\"optgroup\", { label: \"search\", children: searchTargets.map((target) => (_jsx(\"option\", { children: target.target }))) })), autocompleteTargets && (_jsx(\"optgroup\", { label: \"autocomplete\", children: autocompleteTargets.map((target) => (_jsx(\"option\", { children: target.target }))) })), recommendationBundleTargets && (_jsx(\"optgroup\", { label: \"recommendation/bundle\", children: recommendationBundleTargets.map((target) => (_jsx(\"option\", { children: target.target }))) })), recommendationDefaultTargets && (_jsx(\"optgroup\", { label: \"recommendation/default\", children: recommendationDefaultTargets.map((target) => (_jsx(\"option\", { children: target.target }))) })), recommendationEmailTargets && (_jsx(\"optgroup\", { label: \"recommendation/email\", children: recommendationEmailTargets.map((target) => (_jsx(\"option\", { children: target.target }))) }))] })] }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"template-select\", children: \"Template Component: \" }), _jsx(\"select\", { id: \"template-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const selectedTemplate = selectedOption.value;\n                                const target = templatesStore.getTarget(selectedTarget.type, selectedTarget.target);\n                                target?.setComponent(selectedTemplate);\n                            }, children: Object.keys({\n                                ...(selectedTarget.type.startsWith('recommendation/')\n                                    ? { ...library.components.recommendation[selectedTarget.type.split('/')[1]] }\n                                    : { ...library.components[selectedTarget.type] }),\n                            }).map((componentName) => {\n                                return _jsx(\"option\", { selected: componentName === selectedTarget.template.component, children: componentName });\n                            }) })] }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"result-select\", children: \"Result Component: \" }), _jsx(\"select\", { id: \"result-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const selectedTemplate = selectedOption.value;\n                                const target = templatesStore.getTarget(selectedTarget.type, selectedTarget.target);\n                                target?.setResultComponent(selectedTemplate);\n                            }, children: Object.keys(library.components.result || {}).map((componentName) => {\n                                return _jsx(\"option\", { selected: componentName === selectedTarget.template.resultComponent, children: componentName });\n                            }) })] }), _jsxs(\"div\", { className: \"section\", children: [_jsx(\"label\", { htmlFor: \"theme-select\", children: \"Theme: \" }), _jsxs(\"select\", { id: \"theme-select\", onChange: (e) => {\n                                const { selectedIndex, options } = e.currentTarget;\n                                const selectedOption = options[selectedIndex];\n                                const selectedTheme = selectedOption.value;\n                                const type = selectedOption.closest('optgroup')?.label;\n                                const target = templatesStore.getTarget(selectedTarget.type, selectedTarget.target);\n                                target?.setTheme(selectedTheme, type);\n                            }, children: [_jsx(\"optgroup\", { label: \"library\", children: libraryThemes.map((libraryTheme) => (_jsx(\"option\", { selected: selectedTargetConfig.theme.location === 'library' && selectedTargetConfig.theme.name === libraryTheme, children: libraryTheme }))) }), _jsx(\"optgroup\", { label: \"local\", children: lcoalThemes.map((localTheme) => (_jsx(\"option\", { selected: selectedTargetConfig.theme.location === 'local' && selectedTargetConfig.theme.name === localTheme, children: localTheme }))) })] })] }), _jsxs(\"h2\", { children: [\"Theme variables (\", selectedTargetConfig.theme.name, \")\"] }), _jsx(\"div\", { className: \"section\", children: theme?.variables && (_jsx(ThemeEditor, { property: theme?.variables, rootEditingKey: 'variables', themeName: selectedTarget.template.theme.name, setOverride: setOverride, isColorPickerVisible: isColorPickerVisible, setColorPickerVisible: setColorPickerVisible })) })] }) }));\n});\nconst ThemeEditor = (props) => {\n    const pathPrefix = props.pathPrefix || [];\n    const path = [...pathPrefix, props?.propertyName].filter((a) => a);\n    const themeName = props.themeName;\n    const setOverride = props.setOverride;\n    const rootEditingKey = props.rootEditingKey;\n    const setColorPickerVisible = props.setColorPickerVisible;\n    const isColorPickerVisible = props.isColorPickerVisible;\n    const [colorBeingEdited, setColorBeingEdited] = useState('');\n    if (!props?.property || Array.isArray(props.property) || typeof props.property === 'number' || typeof props.property === 'boolean') {\n        // ignore arrays, numbers, and booleans\n        return null;\n    }\n    if (typeof props.property === 'object') {\n        // object means we need to recurse until we get to the primitives\n        return Object.values(props.property).map((property, index) => {\n            return (_jsx(ThemeEditor, { property: property, rootEditingKey: rootEditingKey, themeName: themeName, setOverride: setOverride, propertyName: Object.getOwnPropertyNames(props.property)[index], pathPrefix: [...pathPrefix, props.propertyName], isColorPickerVisible: isColorPickerVisible, setColorPickerVisible: setColorPickerVisible }, index));\n        });\n    }\n    else if (typeof props.property === 'string') {\n        const value = props.property.toString();\n        const key = path.join('.');\n        if (path.includes('colors')) {\n            return (_jsxs(\"div\", { className: classnames('theme-editor'), children: [_jsxs(\"label\", { children: [key, \": \"] }), _jsx(\"div\", { className: 'color-preview', css: CSS.ColorDisplay({ color: value, isColorPickerVisible }), onClick: () => {\n                            setColorPickerVisible('');\n                            if (isColorPickerVisible !== key) {\n                                setColorPickerVisible(key);\n                                setColorBeingEdited(value);\n                            }\n                        } }), _jsx(\"div\", { className: 'color-value', children: value }), isColorPickerVisible == key && (_jsx(ChromePicker, { color: colorBeingEdited, onChange: (color) => {\n                            setColorBeingEdited(color.hex);\n                            setOverride({\n                                themeName,\n                                path,\n                                rootEditingKey,\n                                value: color.hex,\n                            });\n                        } }))] }));\n        }\n    }\n};\n"],"names":[],"sourceRoot":""}